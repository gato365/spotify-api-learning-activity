---
title: "Spotify API with R"
format: revealjs
editor: visual
---

```{r, echo = FALSE}
library(quarto)
library(tidyverse)
library(palmerpenguins)
library(revealjs)
```

# Introduction

<!-- Intro to ourselves and the project itself Creating a package in R using the Spotify API for web developers -->

## Purpose

To create a curriculum about interacting with APIs from templates to understand existing functions and how to create own functions. <!-- through understanding functions and visualizations; --> <!-- for introduction data science students; -->

## What We Had To Learn {.smaller}

1.  Setting Up Environment (Create App from Spotify for Developers, Client ID and Secret)
2.  Reading and Understanding Spotify R Documentation from charlie86 github

-   exisitng functions, how they work etc.

3.  Use Github as a team of pushing, pulling, syncing, leaving notes
4.  Creating Unique Plots (Valence vs. Energy, Radar Plot, Violin Plot) + Using Plotly for Interactivity
5.  Utilizing ChatGPT effectively to problems solve along with Google
6.  Working closely with a Professor weekly to schedule tasks and give updates

-   Figuring out direction of research and what to spend time on;
-   Delegation of tasks

7.  Recreating Existing Functions and Creating New Functions (get_summary, etc.)
8.  Creating packages and testing functions
9.  Using R Quarto

# Approaches

## Just API Call {.smaller}

```{r}
# Once adam installs plotly;
# devtools::install_github("AdamDelRio/SpotifyProject")
```

```{r, echo = FALSE}
library(spotifyr)
library(tidyverse)
library(plotly)
```

```         
Sys.setenv(SPOTIFY_CLIENT_ID = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')

Sys.setenv(SPOTIFY_CLIENT_SECRET = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')

access_token <- get_spotify_access_token()
```

```{r, echo = FALSE}
Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925')

access_token <- get_spotify_access_token()
```

## Function with API Call {.smaller}

```         
create_violin_plot_album_danceability <- function(artist_id, limit = 7, authorization = get_spotify_access_token()) {
    df_artist <- get_artist_audio_features(artist_id, authorization = authorization)

    album_names <- unique(df_artist$album_name)[1:limit]

    # only keep rows of data frame where album name is one of the names in album_names;
    df_artist <- df_artist[df_artist$album_name %in% album_names, ]

    # not based on size of input, but rather number of rows of df;
    # if (nrow(df_artist) <= 5)
    if(length(album_names) <= 5) {
      # Can also try total characters divided by 10 to create ratio requirement; Maybe;
      if (any(nchar(unique(df_artist$album_name)) > 10)) {
        gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
                ggplot2::geom_violin(aes(fill = album_name)) +
                # can use springf or paste; equivalent of {} for var in string;
                labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
                theme(plot.title = element_text(hjust = 0.5),
                      axis.text.x=element_blank(),
                      axis.ticks.x=element_blank()
                      ) +
                stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
      } else {
        gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
                ggplot2::geom_violin(aes(fill = album_name)) +
                # can use sprintf or paste; equivalent of {} for var in string;
                labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") +
                theme(plot.title = element_text(hjust = 0.5)) +
                stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
        }
    }
    else {
      gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
              ggplot2::geom_violin(aes(fill = album_name)) +
              labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
              theme(plot.title = element_text(hjust = 0.5),
                    axis.text.x=element_blank(),
                    axis.ticks.x=element_blank()
                    ) +
              stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
    }
    plotly::ggplotly(gg)
}
```

```{r, echo = FALSE}
create_violin_plot_album_danceability <- function(artist_id, limit = 7, authorization = get_spotify_access_token()) {
    df_artist <- get_artist_audio_features(artist_id, authorization = authorization)

    album_names <- unique(df_artist$album_name)[1:limit]

    # only keep rows of data frame where album name is one of the names in album_names;
    df_artist <- df_artist[df_artist$album_name %in% album_names, ]

    # not based on size of input, but rather number of rows of df;
    # if (nrow(df_artist) <= 5)
    if(length(album_names) <= 5) {
      # Can also try total characters divided by 10 to create ratio requirement; Maybe;
      if (any(nchar(unique(df_artist$album_name)) > 10)) {
        gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
                ggplot2::geom_violin(aes(fill = album_name)) +
                # can use springf or paste; equivalent of {} for var in string;
                labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
                theme(plot.title = element_text(hjust = 0.5),
                      axis.text.x=element_blank(),
                      axis.ticks.x=element_blank()
                      ) +
                stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
      } else {
        gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
                ggplot2::geom_violin(aes(fill = album_name)) +
                # can use sprintf or paste; equivalent of {} for var in string;
                labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") +
                theme(plot.title = element_text(hjust = 0.5)) +
                stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
        }
    }
    else {
      gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
              ggplot2::geom_violin(aes(fill = album_name)) +
              labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
              theme(plot.title = element_text(hjust = 0.5),
                    axis.text.x=element_blank(),
                    axis.ticks.x=element_blank()
                    ) +
              stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
    }
    gg
    # plotly::ggplotly(gg)
}
```

## Functions that

1.  Make API Call
2.  Performs something else
    1.  Manipulation
    2.  Select
    3.  Filter
    4.  Visualize

# Applications (RShiny)

## Summaries

## Visualizations

```{r, echo = FALSE}
# Billie Eilish
#| output-location: slide
create_violin_plot_album_danceability("6qqNVTkY8uBg9cP3Jd7DAH")
```

```{r, echo = FALSE}
# Ken Carson
#| output-location: slide
create_violin_plot_album_danceability("3gBZUcNeVumkeeJ19CY2sX")
```

```{r, echo = TRUE}
# Travis Scott
create_violin_plot_album_danceability("0Y5tJX1MQlPlqiwlOH1tJY")
```

```{r, echo = TRUE}
# Kanye West
create_violin_plot_album_danceability("5K4W6rqBFWDnAN6FQUkS6x")
```

```{r, echo = TRUE}
# Bruno Mars
create_violin_plot_album_danceability("0du5cEVh5yTK9QJze8zA0C")
```

# Conclusions

John Doe

## Further Work

1.  Weather App
2.  Youtube
3.  Python Version
4.  Create App to Data Base
5.  Building Database
6.  Write a Paper
7.  More Conferences

How did we benefit?

DO I INCLUDE THIS?

# Previous Presentation Outline:

**Adam and Ken** - All started reviewing the spotifyr package code and understanding the calls and functions used. Followed up with creating a number of visualizations from the functions to see what is returned exactly and what visualizations could be created. Probably show some of the created visualizations here and explain that they are callable in the package. Then explain our work recreating and creating new functions through the api calls

### Understanding spotifyr package and Charlie functions

### Creating functions

Adam: get_BLANK_summary, etc.

### Visualizations

**Valence vs. Energy Plots**

Album, Artist, Genre

**Radar Plots**

Album, Artist, Genre

**Violin Plots**

Album, Artist, Genre

<!-- Set Up -->

<!-- ```{r, echo = FALSE} -->

<!-- library(spotifyr) -->

<!-- library(tidyverse) -->

<!-- library(plotly) -->

<!-- ``` -->

<!-- ```{r, echo = FALSE} -->

<!-- Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19') -->

<!-- Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925') -->

<!-- access_token <- get_spotify_access_token() -->

<!-- ``` -->

<!-- ```{r, echo = TRUE} -->

<!-- create_violin_plot_album_danceability <- function(artist_id, limit = 7, authorization = get_spotify_access_token()) { -->

<!--     df_artist <- get_artist_audio_features(artist_id, authorization = authorization) -->

<!--     album_names <- unique(df_artist$album_name)[1:limit] -->

<!--     # only keep rows of data frame where album name is one of the names in album_names; -->

<!--     df_artist <- df_artist[df_artist$album_name %in% album_names, ] -->

<!--     # not based on size of input, but rather number of rows of df; -->

<!--     # if (nrow(df_artist) <= 5) -->

<!--     if(length(album_names) <= 5) { -->

<!--       # Can also try total characters divided by 10 to create ratio requirement; Maybe; -->

<!--       if (any(nchar(unique(df_artist$album_name)) > 10)) { -->

<!--         gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  + -->

<!--                 ggplot2::geom_violin(aes(fill = album_name)) + -->

<!--                 # can use springf or paste; equivalent of {} for var in string; -->

<!--                 labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") + -->

<!--                 theme(plot.title = element_text(hjust = 0.5), -->

<!--                       axis.text.x=element_blank(), -->

<!--                       axis.ticks.x=element_blank() -->

<!--                       ) + -->

<!--                 stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red") -->

<!--       } else { -->

<!--         gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  + -->

<!--                 ggplot2::geom_violin(aes(fill = album_name)) + -->

<!--                 # can use sprintf or paste; equivalent of {} for var in string; -->

<!--                 labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") + -->

<!--                 theme(plot.title = element_text(hjust = 0.5)) + -->

<!--                 stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red") -->

<!--         } -->

<!--     } -->

<!--     else { -->

<!--       gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  + -->

<!--               ggplot2::geom_violin(aes(fill = album_name)) + -->

<!--               labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") + -->

<!--               theme(plot.title = element_text(hjust = 0.5), -->

<!--                     axis.text.x=element_blank(), -->

<!--                     axis.ticks.x=element_blank() -->

<!--                     ) + -->

<!--               stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red") -->

<!--     } -->

<!--     plotly::ggplotly(gg) -->

<!-- } -->

<!-- ``` -->

<!-- ```{r, echo = TRUE} -->

<!-- # Billie Eilish -->

<!-- create_violin_plot_album_danceability("6qqNVTkY8uBg9cP3Jd7DAH") -->

<!-- ``` -->

<!-- ```{r, echo = TRUE} -->

<!-- # Ken Carson -->

<!-- create_violin_plot_album_danceability("3gBZUcNeVumkeeJ19CY2sX") -->

<!-- ``` -->

<!-- ```{r, echo = TRUE} -->

<!-- # Travis Scott -->

<!-- create_violin_plot_album_danceability("0Y5tJX1MQlPlqiwlOH1tJY") -->

<!-- ``` -->

<!-- ```{r, echo = TRUE} -->

<!-- # Kanye West -->

<!-- create_violin_plot_album_danceability("5K4W6rqBFWDnAN6FQUkS6x") -->

<!-- ``` -->

<!-- ```{r, echo = TRUE} -->

<!-- # Bruno Mars -->

<!-- create_violin_plot_album_danceability("0du5cEVh5yTK9QJze8zA0C") -->

<!-- ``` -->

<!-- **Emily** - Explain her experience with creating the templates and the different iterations that to create the best template for teaching students Show each template (or the important ones) on a slide and quickly go over the pros and cons of each iteration Explain pros and cons of final template as well and its purpose for why it was chosen -->

<!-- ### Creating Templates -->

<!-- ## Conclusion -->

<!-- Explain where future work could be done and what we particularly focused on Calls, visualizations, and joins for data science purposes Probably all on one side because there won't be too much time remaining Future work in other, potentially more complicated APIs, with using the calls and visualizations to create apps and develop websites and such -->
