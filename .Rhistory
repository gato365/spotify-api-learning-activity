axis.ticks.x=element_blank()
)
}
}
# install.packages("spotifyr")
# install.packages("tidyverse")
library(spotifyr)
library(tidyverse)
Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925')
access_token <- get_spotify_access_token()
get_artist_top_tracks <- function(id,
market = 'US',
authorization = get_spotify_access_token(),
include_meta_info = FALSE) {
base_url <- 'https://api.spotify.com/v1/artists'
if (!is.null(market)) {
if (!str_detect(market, '^[[:alpha:]]{2}$')) {
stop('"market" must be an ISO 3166-1 alpha-2 country code')
}
}
params <- list(
market = market,
access_token = authorization
)
url <- str_glue('{base_url}/{id}/top-tracks')
res <- RETRY(verb = 'GET', url, query = params, encode = 'json', terminate_on = c(401, 403, 404))
stop_for_status(res)
res <- fromJSON(content(res, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
if (!include_meta_info) {
res <- res$tracks
}
res
}
# install.packages("httr")
# install.packages("jsonlite")
library(httr)
library(jsonlite)
create_violin_plot_artist_danceability <- function(artist_ids, authorization = get_spotify_access_token()) {
# Get top 10 tracks of artist:
list_df_artist_top_tracks <- artist_ids %>%
purrr::map(~ get_artist_top_tracks(.x))
# From list above, pull out the song ids and make into vector:
vector_song_ids <- list_df_artist_top_tracks %>%
map(~ .x %>% pull(id)) %>%
unlist()
# Vector of artist names:
# Get artist names and duplicate them
vector_artist_names <- artist_ids %>%
map(~ rep(get_artists(.x)$name, times = nrow(get_artist_top_tracks(.x)))) %>%
unlist()
# Get track audio features of artist 10 songs:
df_tracks <- get_track_audio_features(vector_song_ids, authorization = get_spotify_access_token()) %>%
mutate(artist = vector_artist_names)
if (length(artist_ids) <= 5) {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "Artist", y = "Danceability", fill = "Artist") +
theme(plot.title = element_text(hjust = 0.5))
} else {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
}
}
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "0BvkDsjIUla7X0k6CSWh1I", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "0BvkDsjIUla7X0k6CSWh1I", "45eNHdiiabvmbp4erw26rg", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe"))
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk"))
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk", "0ksX396B3t2Gt8kwr0BJZk"))
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk", "0ksX396B3t2Gt8kwr0BJZk", "0ksX396B3t2Gt8kwr0BJZk"))
create_violin_plot_artist_danceability <- function(artist_ids, authorization = get_spotify_access_token()) {
# Get top 10 tracks of artist:
list_df_artist_top_tracks <- artist_ids %>%
purrr::map(~ get_artist_top_tracks(.x))
# From list above, pull out the song ids and make into vector:
vector_song_ids <- list_df_artist_top_tracks %>%
map(~ .x %>% pull(id)) %>%
unlist()
# Vector of artist names:
# Get artist names and duplicate them
vector_artist_names <- artist_ids %>%
map(~ rep(get_artists(.x)$name, times = nrow(get_artist_top_tracks(.x)))) %>%
unlist()
# Get track audio features of artist 10 songs:
df_tracks <- get_track_audio_features(vector_song_ids, authorization = get_spotify_access_token()) %>%
mutate(artist = vector_artist_names)
if (length(artist_ids) <= 3 | (length(artist_ids) <= 5 & any(nchar(artist_ids) <= 10))) {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "Artist", y = "Danceability", fill = "Artist") +
theme(plot.title = element_text(hjust = 0.5))
} else {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
}
}
create_violin_plot_artist_danceability <- function(artist_ids, authorization = get_spotify_access_token()) {
# Get top 10 tracks of artist:
list_df_artist_top_tracks <- artist_ids %>%
purrr::map(~ get_artist_top_tracks(.x))
# From list above, pull out the song ids and make into vector:
vector_song_ids <- list_df_artist_top_tracks %>%
map(~ .x %>% pull(id)) %>%
unlist()
# Vector of artist names:
# Get artist names and duplicate them
vector_artist_names <- artist_ids %>%
map(~ rep(get_artists(.x)$name, times = nrow(get_artist_top_tracks(.x)))) %>%
unlist()
# Get track audio features of artist 10 songs:
df_tracks <- get_track_audio_features(vector_song_ids, authorization = get_spotify_access_token()) %>%
mutate(artist = vector_artist_names)
if ((length(artist_ids) <= 3 & any(nchar(artist_ids) > 10)) | (length(artist_ids) <= 5 & any(nchar(artist_ids) <= 10))) {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "Artist", y = "Danceability", fill = "Artist") +
theme(plot.title = element_text(hjust = 0.5))
} else {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
}
}
create_violin_plot_artist_danceability <- function(artist_ids, authorization = get_spotify_access_token()) {
# Get top 10 tracks of artist:
list_df_artist_top_tracks <- artist_ids %>%
purrr::map(~ get_artist_top_tracks(.x))
# From list above, pull out the song ids and make into vector:
vector_song_ids <- list_df_artist_top_tracks %>%
map(~ .x %>% pull(id)) %>%
unlist()
# Vector of artist names:
# Get artist names and duplicate them
vector_artist_names <- artist_ids %>%
map(~ rep(get_artists(.x)$name, times = nrow(get_artist_top_tracks(.x)))) %>%
unlist()
# Get track audio features of artist 10 songs:
df_tracks <- get_track_audio_features(vector_song_ids, authorization = get_spotify_access_token()) %>%
mutate(artist = vector_artist_names)
if ((length(artist_ids) <= 3 & any(nchar(artist_ids) > 10) & any(nchar(artist_ids) < 30)) | (length(artist_ids) <= 5 & any(nchar(artist_ids) <= 10))) {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "Artist", y = "Danceability", fill = "Artist") +
theme(plot.title = element_text(hjust = 0.5))
} else {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
}
}
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk", "0ksX396B3t2Gt8kwr0BJZk"))
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk"))
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk", "0ksX396B3t2Gt8kwr0BJZk"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "0BvkDsjIUla7X0k6CSWh1I", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "41MozSoPIsD1dJM0CLPjZF", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability <- function(artist_ids, authorization = get_spotify_access_token()) {
# Get top 10 tracks of artist:
list_df_artist_top_tracks <- artist_ids %>%
purrr::map(~ get_artist_top_tracks(.x))
# From list above, pull out the song ids and make into vector:
vector_song_ids <- list_df_artist_top_tracks %>%
map(~ .x %>% pull(id)) %>%
unlist()
# Vector of artist names:
# Get artist names and duplicate them
vector_artist_names <- artist_ids %>%
map(~ rep(get_artists(.x)$name, times = nrow(get_artist_top_tracks(.x)))) %>%
unlist()
# Get track audio features of artist 10 songs:
df_tracks <- get_track_audio_features(vector_song_ids, authorization = get_spotify_access_token()) %>%
mutate(artist = vector_artist_names)
if ((length(artist_ids) <= 3 & any(nchar(artist_ids) > 15) & any(nchar(artist_ids) < 30)) | (length(artist_ids) <= 5 & any(nchar(artist_ids) <= 15))) {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "Artist", y = "Danceability", fill = "Artist") +
theme(plot.title = element_text(hjust = 0.5))
} else {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
}
}
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk"))
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk", "0ksX396B3t2Gt8kwr0BJZk"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "41MozSoPIsD1dJM0CLPjZF", "5he5w2lnU9x7JFhnwcekXX"))
length(c("c","a","x","d"))
length(c("c","agfhd","xs","def"))
create_violin_plot_artist_danceability <- function(artist_ids, authorization = get_spotify_access_token()) {
# Get top 10 tracks of artist:
list_df_artist_top_tracks <- artist_ids %>%
purrr::map(~ get_artist_top_tracks(.x))
# From list above, pull out the song ids and make into vector:
vector_song_ids <- list_df_artist_top_tracks %>%
map(~ .x %>% pull(id)) %>%
unlist()
# Vector of artist names:
# Get artist names and duplicate them
vector_artist_names <- artist_ids %>%
map(~ rep(get_artists(.x)$name, times = nrow(get_artist_top_tracks(.x)))) %>%
unlist()
# Get track audio features of artist 10 songs:
df_tracks <- get_track_audio_features(vector_song_ids, authorization = get_spotify_access_token()) %>%
mutate(artist = vector_artist_names)
if ((length(artist_ids) <= 3 & any(nchar(artist_ids) > 15) & any(nchar(artist_ids) < 30)) | (length(artist_ids) <= 5 & all(nchar(artist_ids) <= 15))) {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "Artist", y = "Danceability", fill = "Artist") +
theme(plot.title = element_text(hjust = 0.5))
} else {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
}
}
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "41MozSoPIsD1dJM0CLPjZF", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability <- function(artist_ids, authorization = get_spotify_access_token()) {
# Get top 10 tracks of artist:
list_df_artist_top_tracks <- artist_ids %>%
purrr::map(~ get_artist_top_tracks(.x))
# From list above, pull out the song ids and make into vector:
vector_song_ids <- list_df_artist_top_tracks %>%
map(~ .x %>% pull(id)) %>%
unlist()
# Vector of artist names:
# Get artist names and duplicate them
vector_artist_names <- artist_ids %>%
map(~ rep(get_artists(.x)$name, times = nrow(get_artist_top_tracks(.x)))) %>%
unlist()
# Get track audio features of artist 10 songs:
df_tracks <- get_track_audio_features(vector_song_ids, authorization = get_spotify_access_token()) %>%
mutate(artist = vector_artist_names)
if ((length(artist_ids) <= 3 & any(nchar(vector_artist_names) > 15) & any(nchar(vector_artist_names) < 30)) | (length(artist_ids) <= 5 & all(nchar(vector_artist_names) <= 15))) {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "Artist", y = "Danceability", fill = "Artist") +
theme(plot.title = element_text(hjust = 0.5))
} else {
ggplot2::ggplot(df_tracks, aes(x=artist, y=danceability))  +
ggplot2::geom_violin(aes(fill = artist)) +
labs(title = "Danceability of Artist Top Tracks", x = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
}
}
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk"))
create_violin_plot_artist_danceability(c("05YVYeV4HxYp5rrWalvuE1", "07d5etnpjriczFBB8pxmRe", "0NWbwDZY1VkRqFafuQm6wk", "0ksX396B3t2Gt8kwr0BJZk"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "5he5w2lnU9x7JFhnwcekXX"))
# WHY NOT SHOW X AXIS LABELS?
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "41MozSoPIsD1dJM0CLPjZF", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "0BvkDsjIUla7X0k6CSWh1I", "5he5w2lnU9x7JFhnwcekXX"))
create_violin_plot_artist_danceability(c("5K4W6rqBFWDnAN6FQUkS6x", "06HL4z0CvFAxyc27GXpf02", "19eLuQmk9aCobbVDHc6eek", "41MozSoPIsD1dJM0CLPjZF", "0BvkDsjIUla7X0k6CSWh1I", "45eNHdiiabvmbp4erw26rg", "5he5w2lnU9x7JFhnwcekXX"))
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
install.packages("quarto")
install.packages("quarto")
library(spotifyr)
library(tidyverse)
library(plotly)
library(spotifyr)
library(tidyverse)
library(plotly)
Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925')
access_token <- get_spotify_access_token()
library(spotifyr)
library(tidyverse)
library(plotly)
Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925')
access_token <- get_spotify_access_token()
create_violin_plot_album_danceability <- function(artist_id, limit = 7, authorization = get_spotify_access_token()) {
df_artist <- get_artist_audio_features(artist_id, authorization = authorization)
album_names <- unique(df_artist$album_name)[1:limit]
# only keep rows of data frame where album name is one of the names in album_names;
df_artist <- df_artist[df_artist$album_name %in% album_names, ]
# not based on size of input, but rather number of rows of df;
# if (nrow(df_artist) <= 5)
if(length(album_names) <= 5) {
# Can also try total characters divided by 10 to create ratio requirement; Maybe;
if (any(nchar(unique(df_artist$album_name)) > 10)) {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
# can use springf or paste; equivalent of {} for var in string;
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
} else {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
# can use sprintf or paste; equivalent of {} for var in string;
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5)) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
}
}
else {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
}
plotly::ggplotly(gg)
}
# Billie Eilish
create_violin_plot_album_danceability("6qqNVTkY8uBg9cP3Jd7DAH")
install.packages("revealjs")
library(revealjs)
library(tidyverse)
library(palmerpenguins)
library(revealjs)
library(spotifyr)
library(tidyverse)
library(plotly)
Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925')
access_token <- get_spotify_access_token()
create_violin_plot_album_danceability <- function(artist_id, limit = 7, authorization = get_spotify_access_token()) {
df_artist <- get_artist_audio_features(artist_id, authorization = authorization)
album_names <- unique(df_artist$album_name)[1:limit]
# only keep rows of data frame where album name is one of the names in album_names;
df_artist <- df_artist[df_artist$album_name %in% album_names, ]
# not based on size of input, but rather number of rows of df;
# if (nrow(df_artist) <= 5)
if(length(album_names) <= 5) {
# Can also try total characters divided by 10 to create ratio requirement; Maybe;
if (any(nchar(unique(df_artist$album_name)) > 10)) {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
# can use springf or paste; equivalent of {} for var in string;
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
} else {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
# can use sprintf or paste; equivalent of {} for var in string;
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5)) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
}
}
else {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
}
plotly::ggplotly(gg)
}
# Billie Eilish
create_violin_plot_album_danceability("6qqNVTkY8uBg9cP3Jd7DAH")
# Ken Carson
create_violin_plot_album_danceability("3gBZUcNeVumkeeJ19CY2sX")
# Travis Scott
create_violin_plot_album_danceability("0Y5tJX1MQlPlqiwlOH1tJY")
# Kanye West
create_violin_plot_album_danceability("5K4W6rqBFWDnAN6FQUkS6x")
# Bruno Mars
create_violin_plot_album_danceability("0du5cEVh5yTK9QJze8zA0C")
library(tidyverse)
library(palmerpenguins)
library(revealjs)
library(spotifyr)
library(tidyverse)
library(plotly)
Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925')
access_token <- get_spotify_access_token()
create_violin_plot_album_danceability <- function(artist_id, limit = 7, authorization = get_spotify_access_token()) {
df_artist <- get_artist_audio_features(artist_id, authorization = authorization)
album_names <- unique(df_artist$album_name)[1:limit]
# only keep rows of data frame where album name is one of the names in album_names;
df_artist <- df_artist[df_artist$album_name %in% album_names, ]
# not based on size of input, but rather number of rows of df;
# if (nrow(df_artist) <= 5)
if(length(album_names) <= 5) {
# Can also try total characters divided by 10 to create ratio requirement; Maybe;
if (any(nchar(unique(df_artist$album_name)) > 10)) {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
# can use springf or paste; equivalent of {} for var in string;
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
} else {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
# can use sprintf or paste; equivalent of {} for var in string;
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5)) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
}
}
else {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
}
plotly::ggplotly(gg)
}
# Billie Eilish
create_violin_plot_album_danceability("6qqNVTkY8uBg9cP3Jd7DAH")
install.packages("tidyverse")
install.packages("spotifyr")
install.packages("plotly")
install.packages("revealjs")
install.packages("palmerpenguins")
library(tidyverse)
library(palmerpenguins)
library(revealjs)
library(spotifyr)
library(tidyverse)
library(plotly)
Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925')
access_token <- get_spotify_access_token()
create_violin_plot_album_danceability <- function(artist_id, limit = 7, authorization = get_spotify_access_token()) {
df_artist <- get_artist_audio_features(artist_id, authorization = authorization)
album_names <- unique(df_artist$album_name)[1:limit]
# only keep rows of data frame where album name is one of the names in album_names;
df_artist <- df_artist[df_artist$album_name %in% album_names, ]
# not based on size of input, but rather number of rows of df;
# if (nrow(df_artist) <= 5)
if(length(album_names) <= 5) {
# Can also try total characters divided by 10 to create ratio requirement; Maybe;
if (any(nchar(unique(df_artist$album_name)) > 10)) {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
# can use springf or paste; equivalent of {} for var in string;
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
} else {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
# can use sprintf or paste; equivalent of {} for var in string;
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5)) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
}
}
else {
gg <- ggplot2::ggplot(df_artist, aes(x=album_name, y=danceability))  +
ggplot2::geom_violin(aes(fill = album_name)) +
labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
}
plotly::ggplotly(gg)
}
create_violin_plot_album_danceability("6qqNVTkY8uBg9cP3Jd7DAH")
