---
title: "Spotify API with R"
editor: visual
format:
  revealjs:
    theme: serif
---

```{r, echo = FALSE}
devtools::install_github("AdamDelRio/SpotifyProject")
```

```{r, echo = FALSE}
Sys.setenv(SPOTIFY_CLIENT_ID = 'f995a310ad724cd49e6eb7a8736e7b19')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9e60ab8050b945558219098bc9470925')
```

```{r, echo = FALSE}
library(quarto)
library(tidyverse)
library(revealjs)
library(shiny)
library(SpotifyProject)
```

[Try The Shiny App!](https://to2wk0-adam-del0rio.shinyapps.io/MyShinyApp/)

# Introduction

<!-- Intro to ourselves and the project itself Creating a package in R using the Spotify API for web developers -->

What is an API?

## APIs

An API is a Back-end Service that Allows a User to Access Data from an Existing Database

## Purpose

1.  To create a curriculum about interacting with APIs
2.  Learn about the benefits of exploring Spotify APIs
3.  Data Science usages

## Methods

1.  Templates
2.  Package
3.  Visualizations

# Results

## Templates

![](Spotify API Framework step 0.png)

## Templates

![](Spotify API Framework step 1.png)

## Templates

![](Spotify API Framework step 2.png)

## Templates

![](Spotify API Framework step 3.png)

## Templates

![](Spotify API Framework manipulations.png)

## Visualization

```         
create_violin_plot_album_danceability <- function(query = NULL, artist_id = NULL, limit = 7, authorization = get_spotify_access_token()) {
    df_artist <- get_artist_audio_features(query = query, id = artist_id, authorization = authorization)
    
    album_names <- unique(df_artist$album_name)[1:limit]
    
    # only keep rows of data frame where album name is one of the names in album_names;
    df_artist <- df_artist[df_artist$album_name %in% album_names, ]

    # not based on size of input, but rather number of rows of df;
    # if (nrow(df_artist) <= 5)
    if(length(album_names) <= 5) {
      # Can also try total characters divided by 10 to create ratio requirement; Maybe;
      if (any(nchar(unique(df_artist$album_name)) > 10)) {
        gg <- ggplot2::ggplot(df_artist, ggplot2::aes(x=album_name, y=danceability))  + 
                ggplot2::geom_violin(ggplot2::aes(fill = album_name)) + 
                # can use springf or paste; equivalent of {} for var in string;
                ggplot2::labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") + 
                ggplot2::theme_bw() +
                ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), 
                      axis.text.x = ggplot2::element_blank(), 
                      axis.ticks.x = ggplot2::element_blank()
                      ) + 
                ggplot2::stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
      } else {
        gg <- ggplot2::ggplot(df_artist, ggplot2::aes(x=album_name, y=danceability))  + 
                ggplot2::geom_violin(ggplot2::aes(fill = album_name)) + 
                # can use sprintf or paste; equivalent of {} for var in string;
                ggplot2::labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") +
                ggplot2::theme_bw() + 
                ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + 
                ggplot2::stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
        }
    } 
    else {
      gg <- ggplot2::ggplot(df_artist, ggplot2::aes(x=album_name, y=danceability))  + 
              ggplot2::geom_violin(ggplot2::aes(fill = album_name)) + 
              ggplot2::labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") + 
              ggplot2::theme_bw() +
              ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), 
                    axis.text.x = ggplot2::element_blank(), 
                    axis.ticks.x = ggplot2::element_blank()
                    ) + 
              ggplot2::stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
    }
  plotly(gg)
}
```

## Visualization

```{r, echo = FALSE}
create_violin_plot_album_danceability <- function(query = NULL, artist_id = NULL, limit = 7, authorization = get_spotify_access_token()) {
    df_artist <- get_artist_audio_features(query = query, id = artist_id, authorization = authorization)
    
    album_names <- unique(df_artist$album_name)[1:limit]
    
    # only keep rows of data frame where album name is one of the names in album_names;
    df_artist <- df_artist[df_artist$album_name %in% album_names, ]

    # not based on size of input, but rather number of rows of df;
    # if (nrow(df_artist) <= 5)
    if(length(album_names) <= 5) {
      # Can also try total characters divided by 10 to create ratio requirement; Maybe;
      if (any(nchar(unique(df_artist$album_name)) > 10)) {
        gg <- ggplot2::ggplot(df_artist, ggplot2::aes(x=album_name, y=danceability))  + 
                ggplot2::geom_violin(ggplot2::aes(fill = album_name)) + 
                # can use springf or paste; equivalent of {} for var in string;
                ggplot2::labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") + 
                ggplot2::theme_bw() +
                ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), 
                      axis.text.x = ggplot2::element_blank(), 
                      axis.ticks.x = ggplot2::element_blank()
                      ) + 
                ggplot2::stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
      } else {
        gg <- ggplot2::ggplot(df_artist, ggplot2::aes(x=album_name, y=danceability))  + 
                ggplot2::geom_violin(ggplot2::aes(fill = album_name)) + 
                # can use sprintf or paste; equivalent of {} for var in string;
                ggplot2::labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "Album", y = "Danceability", fill = "Album") +
                ggplot2::theme_bw() + 
                ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + 
                ggplot2::stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
        }
    } 
    else {
      gg <- ggplot2::ggplot(df_artist, ggplot2::aes(x=album_name, y=danceability))  + 
              ggplot2::geom_violin(ggplot2::aes(fill = album_name)) + 
              ggplot2::labs(title = sprintf("Danceability of %s's Albums", df_artist$artist_name[1]), x = "", y = "Danceability", fill = "Album") + 
              ggplot2::theme_bw() +
              ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), 
                    axis.text.x = ggplot2::element_blank(), 
                    axis.ticks.x = ggplot2::element_blank()
                    ) + 
              ggplot2::stat_summary(fun.data = "mean_cl_normal", geom = "point", shape = 20, size = 4, color = "red")
    }
  gg
}

```

```{r, echo = TRUE}
# Bruno Mars
create_violin_plot_album_danceability(query = "Bruno Mars", limit = 4)
```

<!-- through understanding functions and visualizations; -->

<!-- for introduction data science students; -->

## What We Had To Learn {.smaller}

1.  Setting Up Environment (Create App from Spotify for Developers, Client ID and Secret)
2.  Reading and Understanding Spotify R Documentation from charlie86 github
3.  Use Github as a team of pushing, pulling, syncing, leaving notes
4.  Creating Unique Plots (Valence vs. Energy, Radar Plot, Violin Plot) + Using Plotly for Interactivity
5.  Utilizing ChatGPT effectively to problems solve along with Google
6.  Working closely with a Professor weekly to schedule tasks and give updates
7.  Recreating Existing Functions (get_artists, etc.) and Creating New Functions (get_artist_summary, etc.)
8.  Creating the package
9.  Using R Quarto

## Further Work

1.  Create an App Utilizing API Calls
2.  Test Other Web APIs
3.  Python Version
4.  Write a Paper
5.  Present at More Conferences
